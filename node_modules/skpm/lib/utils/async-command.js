'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = asyncCommand;

var _index = require('./index');

function done(err, result) {
  if (err) {
    (0, _index.error)(String(err));
    if (err.stdout) {
      console.log(err.stdout);
    }
    if (err.stderr) {
      console.error(err.stderr);
    }
    if (err.stack) {
      console.error(err.stack);
    }
    process.exit(err.exitCode || 1);
  } else {
    if (result) process.stdout.write(`${result}\n`);
    process.exit(0);
  }
}

function asyncCommand(options) {
  return _extends({}, options, {
    builder(yargs) {
      if (options.builder) {
        Object.keys(options.builder).forEach(option => {
          if (option.positional) {
            yargs.positional(option, options.builder[option]);
          } else {
            yargs.option(option, options.builder[option]);
          }
        });
      }
    },
    handler(argv) {
      const r = options.handler(argv, done);
      if (r && r.then) r.then(result => done(null, result), done);
    }
  });
}