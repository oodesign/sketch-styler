'use strict';

exports.__esModule = true;
exports.initGit = exports.install = undefined;

let install = exports.install = (() => {
  var _ref = _asyncToGenerator(function* (cwd) {
    const child = (0, _child_process.spawn)('npm', ['install'], {
      cwd
    });
    child.stdin.setEncoding('utf-8');
    child.stdout.setEncoding('utf-8');
    child.stderr.setEncoding('utf-8');

    let shouldAskForDevMode = false;

    let stderr = '';

    child.stdout.on('data', function (data) {
      if (data.indexOf('The Sketch developer mode is not enabled') !== -1) {
        // answer no for know but return true so that we can ask later
        shouldAskForDevMode = true;
        setTimeout(function () {
          return child.stdin.write('n\n');
        }, 50);
      }
    });

    child.stderr.on('data', function (data) {
      stderr += data;
    });

    return new Promise(function (resolve, reject) {
      child.on('close', function () {
        return resolve(shouldAskForDevMode);
      });
      child.on('error', function (err) {
        console.error(stderr);
        reject(err);
      });
    });
  });

  return function install(_x) {
    return _ref.apply(this, arguments);
  };
})();

// Initializes the folder using `git init` and a proper `.gitignore` file
// if `git` is present in the $PATH.


let initGit = exports.initGit = (() => {
  var _ref2 = _asyncToGenerator(function* (target) {
    const git = (0, _.hasCommand)('git');

    if (git) {
      const cwd = target;

      yield (0, _child_process.spawn)('git', ['init'], { cwd });
      yield (0, _child_process.spawn)('git', ['add', '-A'], { cwd });

      const defaultGitUser = 'skpm-bot';
      const defaultGitEmail = 'bot@skpm.io';

      const gitUser = yield (0, _getGitUser2.default)(defaultGitEmail, defaultGitUser);

      yield (0, _child_process.spawn)('git', ['commit', '-m', 'initial commit from skpm'], {
        cwd,
        env: {
          GIT_COMMITTER_NAME: gitUser.username,
          GIT_COMMITTER_EMAIL: gitUser.email,
          GIT_AUTHOR_NAME: defaultGitUser,
          GIT_AUTHOR_EMAIL: defaultGitEmail
        }
      });
    } else {
      (0, _.warn)('Could not locate `git` binary in `$PATH`. Skipping!');
    }
  });

  return function initGit(_x2) {
    return _ref2.apply(this, arguments);
  };
})();

// Formulate Questions if `create` args are missing


exports.isMissing = isMissing;

var _child_process = require('child_process');

var _ = require('.');

var _getGitUser = require('./get-git-user');

var _getGitUser2 = _interopRequireDefault(_getGitUser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function isMissing(argv) {
  const out = [];

  const ask = (name, message, val) => {
    const type = val === undefined ? 'input' : 'confirm';
    out.push({ name, message, type, default: val });
  };

  // Required data
  !argv.dest && ask('dest', 'Directory to create the app');
  // Extra data / flags
  !argv.name && ask('name', "The plugin's name");
  !argv.force && ask('force', 'Enforce `dest` directory; will overwrite!', false);
  ask('install', 'Install dependencies', true); // defaults `true`, ask anyway
  !argv.git && ask('git', 'Initialize a `git` repository', false); // defaults `true`, ask anyway

  return out;
}